// Generated by FilterBuilder. http://htmlparser.org
// [aced0005737200296f72672e68746d6c7061727365722e66696c746572732e48617341747472696275746546696c74657296abdfb3b0714cda0200024c000a6d4174747269627574657400124c6a6176612f6c616e672f537472696e673b4c00066d56616c756571007e00017870740005636c617373740003626f78]

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.htmlparser.*;
import org.htmlparser.filters.*;
import org.htmlparser.beans.*;
import org.htmlparser.nodes.TagNode;
import org.htmlparser.tags.Div;
import org.htmlparser.tags.HeadingTag;
import org.htmlparser.util.*;

public class getStatus
{
	// CONSTANTEN
	final String cCategorie = "header-3";
	final String cSubcategorie = "subheader-3";
	final String cServer = "server";
	final String cServerAlt = "server alt";
	
	
	String url;
	Console c;
	private ArrayList<ServerStatus> serverListOld = null;
	private ArrayList<ServerStatus> serverListNew = null;
	private ArrayList<ServerStatus> serverListChanges = null;
	
	public ArrayList<ServerStatus> getChangedServerList(){

		return serverListChanges;
		
	}
    
public ArrayList<ServerStatus> getServerListOld(){
		
    	return serverListOld;
    }
	
	public ArrayList<ServerStatus> getServerList(){
		
    	return serverListNew;
    }
    
    public getStatus(String tUrl, Console tC)
    {
    	url = tUrl;
    	c = tC;
    	refresh();
    }
    public ArrayList<ServerStatus> refresh(){
    	c.cout("refreshing status....");
    	NodeList list = null;
    	Node nArray[] = null;

    	list = getNodes(url, "class", "box");
    	
    	ArrayList<Attribut> attList = new ArrayList<Attribut>();
    	
    	Attribut att = null;
    	
    	
    	att = new Attribut("class", cCategorie);
    	attList.add((Attribut) att.clone());
    	att = new Attribut("class", cSubcategorie);
    	attList.add((Attribut) att.clone());
    	att = new Attribut("class", cServer);
    	attList.add((Attribut) att.clone());
    	att = new Attribut("class", cServerAlt);
    	attList.add((Attribut) att.clone());
    	
        list = extractNodes(list, attList);
        nArray = list.toNodeArray();
        
        serverListNew = readout(nArray);
                
        serverListChanges = ServerStatus.compare(serverListOld, serverListNew);
        serverListOld = serverListNew;
        
        return this.getServerList();
    }
    
    private ArrayList<ServerStatus> readout(Node array[]){
    	ArrayList<ServerStatus> tServerList = new ArrayList<ServerStatus>();
    	String realm = "";
    	for (Node item: array){
    		String output = "";
    		
    		if(item.getText().trim().contains(cSubcategorie)){
    			output += "---------- " + item.toPlainTextString().trim() + " -----------";
    		}else if(item.getText().trim().contains(cCategorie)){
    			output += "########## " + item.toPlainTextString().trim() + " ###########";
    			realm = item.toPlainTextString().trim();
    		}

    		

    		

    		//output += item.getText().trim();
    		Node c = item.getFirstChild();
            while( c!=null ) {
            	// HeadingTag Server Category or SubCategory
            	if( c instanceof HeadingTag){
            		//output += "test" ;
            		
            	}
                if( c instanceof Div ) {

                	if (((Div) c).getAttribute("data-tooltip") != null ){
                		String name = item.toPlainTextString().trim();
                		String status = ((Div) c).getAttribute("data-tooltip");
                		output += name + "\t" + status;
                		
                		tServerList.add(new ServerStatus(realm, name, status));
                	}

                    break;
                }
                
                c = c.getNextSibling();
            }
            
            //output += item.toPlainTextString().trim();
            
    		//System.out.println(output);
    	}
    	System.out.println(tServerList.toString());
		return tServerList;

    }
    
    public void printArray(Node array[]){
    	for (Node item: array){
  
    		
    		String output = item.toPlainTextString();
    		output = output.trim();

    		
    		Node c = item.getFirstChild();
            while( c!=null ) {
                if( c instanceof Div ) {
                	output += "\t \t" + ((Div) c).getAttribute("data-tooltip");
                    break;
                }
                c = c.getNextSibling();
            }

    		System.out.println(output);
    	}
    }
    
    private NodeList extractNodes(NodeList list, ArrayList<Attribut> attList){
    	System.out.println("ArrayList contains " + attList.size() + " key value pairs.");
    	
    	NodeFilter[] array = new NodeFilter[attList.size()];
    	Integer i = 0;
    	for (Attribut att: attList){
    		
    		array[i] = createFilter(att.name, att.value);
    		i++;
    	}

    	NodeList newList = list.extractAllNodesThatMatch(new OrFilter(array), true);
 
    	return newList;
    	
    }
    
    private NodeFilter createFilter(String name, String value){
    	HasAttributeFilter filter0;
    	filter0 = new HasAttributeFilter();
        filter0.setAttributeName(name);
        filter0.setAttributeValue(value);
        
        
        return filter0;
    }
    
    private NodeList getNodes(String url, String name, String value){
    	 HasAttributeFilter filter0 = new HasAttributeFilter();
         filter0.setAttributeName(name);
         filter0.setAttributeValue(value);
         NodeFilter[] array0 = new NodeFilter[1];
         array0[0] = filter0;
         FilterBean bean = new FilterBean();
         bean.setFilters(array0);
         
         bean.setURL (url);
         return bean.getNodes();
    }
    
}
